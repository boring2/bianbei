<style lang="less">
  @border-color: rgb(220, 220, 220);
  .placeHolderTitle {
    display: flex;
    justify-content: center;
    align-items: center;
    image {
      height: 80rpx;
      width: 80rpx;
    }
    background: #000;
    font-size: 35rpx;
    padding: 200rpx 0;
    color: #fff;
  }
  .todayTitle {
    font-size: 40rpx;
    padding: 20rpx;
    padding-top: 400rpx;
    color: #fff;
    // background-position:center center;
    // background-repeat:no-repeat;

  }

  .version-btns {
    width: 100%;
    display: flex;
    justify-content: center;
    border-bottom: 1px solid @border-color;
    .version-btn {
      display: inline-block;
      font-size: 30rpx;
      background: none;
      padding: 15rpx 0;
      margin: 0 30rpx;
      width: 100%;
      border-radius: 0;
      font-weight: 400;
      &::after {
        border: none;
      }
      &.active {
        border-bottom: 8rpx solid #000;
      }
    }
  }

  .ideaInfo {
    display: flex;
    flex-direction: column;
    align-items: flex-start;

    .ideaInfo-wrap {
      display: flex;
      width: 100%;
      padding: 30rpx;
      font-size: 35rpx;
      font-weight: 300;
      .floor-number {
        width: 15%;
        color: rgb(211, 211, 211);
      }
      .ideaInfo-content {
        width: 85%;
        text-shadow: 2rpx 2rpx 8rpx rgba(0, 0, 0, 0.3);
      }
    }
    .ideaInfo-line {
      margin-left: 50rpx;
      width: 100%;
      border-top: 1px solid @border-color;
    }

  }

  .btn-new-wrap {
    text-align: center;
    .btn-new {
      display: inline-block;
      margin: 50rpx 0 80rpx 0;
      width: 90%;
      overflow: initial;
      color: rgb(19, 122, 216);
      background: white;
      font-size: 32rpx;
      font-weight: 400;
      vertical-align: middle;
      box-shadow: 0 0 3px #dedede;
      &::after {
        border: 2rpx solid #dedede !important;
      }
      .plus {
        width: 28rpx;
        height: 28rpx;
        vertical-align: middle;
      }
      text {
        vertical-align:middle;
        margin-left: 20rpx;
      }
    }
  }

  .reply {
    width: 100%;
    position: fixed;
    bottom: 0;
    left: 0;
    display: block;
    background: #f5f5f5;
    border: 1px solid #dedede;
    box-shadow: 2rpx 2rpx 2rpx grey;
    input {
      height: 80rpx;
      margin: 10px;
      font-size: 30rpx;
      padding-left: 20rpx;
      border: 1px solid #dedede;
      background: white !important;
      border-radius: 6px;
    }
  }
  .hide {
    display: none !important;
  }
  .more {
    color: #aaa;
    text-align: center;
    padding: 20rpx 0;
    font-size: 30rpx;
  }
  .view-hover-class {
    background: rgb(188, 229, 255);
  }

</style>

<template>
  <view>
    <view wx:if="{{!loading}}" class="todayTitle" style="background: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1)), url({{topic.img}}) center / cover no-repeat;">
      {{topic.content}}
    </view>
    <view wx:if="{{loading}}" class="placeHolderTitle">
      <image src="../images/loading.gif"/>
      <text>‰∏ªÈ¢òÂä†ËΩΩ‰∏≠...</text>
    </view>
    <view wx:if="{{versions.length > 1}}" class="version-btns">
      <repeat for="{{versions}}" key="index" index="index" item="versionNum">
        <button class="version-btn {{currentVersionNum === index ? 'active' : ''}}" @tap="changeVersion({{index}})">ÊïÖ‰∫ã {{index + 1}}</button>
      </repeat>
    </view>
    <view class="idea-view">
      <repeat for="{{currentIdeas}}" key="index" index="index" item="idea">
        <view class="ideaInfo">
          <view class="ideaInfo-wrap" @tap="showActionSheet({{idea.objectId}}, {{index}})" hover-class="view-hover-class">
            <text class="floor-number" wx:if="{{index < 9}}">#{{'0' + (index + 1)}}</text>
            <text class="floor-number" wx:else>#{{ index + 1 }}</text>
            <text class="ideaInfo-content">{{ idea.content }}</text>
          </view>
          <view class="ideaInfo-line"></view>
        </view>
      </repeat>
    </view>
    <view class="btn-new-wrap" id="btn_new">
      <button class="btn-new" @tap="handleReply(null, 0, 0))">
        <image src="../images/plus@3x.png" class="plus" />
        <text>Êñ∞ÂâßÊÉÖ</text>
      </button>
    </view>
    <!-- <view wx:if="{{isPulling}}" class="more">Ê≠£Âú®ÊãâÂèñÊõ¥Â§ö...</view> -->
    <view class="reply {{isReplying && isReady ? '': 'hide'}}">
      <input confirm-type="send" placeholder="ÂºÄÂßã‰Ω†ÁöÑÂàõ‰Ωú..." focus="{{isReplying}}" @blur="finishEnter" id="inputBox" @input="bindKeyInput" value="{{inputValue}}" @confirm="send"/>
    </view>
  </view>
</template>


<script>
  import wepy from 'wepy'
  import api from '../utils/api'
  import AV from 'leancloud-storage'
  import errorHandler from '../utils/error'

  // console.log('aaaaaaaaaaaaaaaaaaaa')
  // let todayData = Object.assign({}, {
  //   topic: {},
  //   versions: [],
  //   ideas: []
  // })
  export default class Detail extends wepy.component {
    props = {
      topic: {},
      st: {}
    }

    data = {
      loading: true,
      versions: [],
      ideas: [],
      preIdeaId: '',
      currentVersionNum: 0,
      isReplying: false,
      st: null, // sessionToken
      inputValue: '',
      isCheckout: false,
      isNewVersion: false, // ÂÖ®Êñ∞ÁâàÊú¨ÔºåÂè™ÊúâÂú®Á¨¨‰∏Ä‰∏™ideaÊâç‰ºöÊúâ
      sliceIndex: 0,
      isReady: false,
      timer: null,
      isPulling: false
    }

    computed = {
      currentVersion () {
        return this.versions[this.currentVersionNum] || []
      },

      currentIdeas () {
        return this.ideas[this.currentVersionNum] || []
      }
    }

    methods = {
      changeVersion (num, e) {
        this.currentVersionNum = num
        let currentVersionNumIdeas = this.ideas[num]
        if (!currentVersionNumIdeas || !currentVersionNumIdeas.length) {
          wx.showLoading({
            title: 'Ê≠£Âú®Âä†ËΩΩ...',
            mask: true
          })
          this.getCurrentVersionNumIdeas().then((ideas) => {
            this.ideas.push(ideas)
            this.$apply()
            wx.hideLoading()
          })
        }
      },
      handleReply (id, isCheckout, isNewVersion, e) {
        // this.$emit('newBtnClick')
        let lastId = null
        if (this.currentIdeas.length) {
          lastId = this.currentIdeas[this.currentIdeas.length - 1].objectId
        }
        // Âõ†‰∏∫Ê®°Êùø‰º†ÂõûÊù•ÁöÑÊòØnullÂ≠óÁ¨¶‰∏≤
        id = (id === 'null' || !id) ? null : id
        this.preIdeaId = id || lastId
        this.isReplying = true
        this.isCheckout = parseInt(isCheckout) === 1
        this.isNewVersion = parseInt(isNewVersion) === 1
        this.$apply()
        // console.log(isCheckout)
      },
      finishEnter (e) {
        this.isReplying = false
        console.log(e.detail.value)
      },
      bindKeyInput (e) {
        this.inputValue = e.detail.value
      },
      send () {
        this.isReplying = false
        let inputValue = this.inputValue
        const isCheckout = this.isCheckout
        const isNewVersion = this.isNewVersion || this.currentIdeas.length === 0
        this.inputValue = ''

        if (!inputValue.trim()) {
          console.log('input value is empty')
          this.$emit('showToast', 'ËæìÂÖ•‰∏çËÉΩ‰∏∫Á©∫')
          return
        }

        let sendData = {
          topicId: this.topic.objectId,
          content: inputValue,
          isCheckout: isCheckout
        }

        /// Â¶ÇÊûúÊòØcheckoutÂπ∂‰∏îÂè™Êúâ‰∏ÄÊù°ideaÔºåÂ∞±‰∏çÈúÄË¶Å‰∏ãÈù¢Êï∞ÊçÆ
        /// (this.isCheckout && this.sliceIndex === 0) ÁöÑÁõ∏ÂèçÊòØ (!this.isCheckout || this.sliceIndex !== 0)
        if (!isNewVersion) {
          sendData = Object.assign(sendData, {
            versionId: this.versions[this.currentVersionNum].objectId,
            preIdeaId: this.preIdeaId
          })
        }

        let st = wx.getStorageSync('st')

        wx.showLoading({
          title: 'Âàõ‰Ωú‰º†Ëæì‰∏≠...',
          mask: false
        })
        api.postIdea(sendData, st).then((res) => {
          wx.hideLoading()
          if (res.data.code) {
            this._errorHandle(res.data)
          } else {
            console.log(res.data)
            let idea = res.data.idea
            let version = res.data.version
            if (isNewVersion || isCheckout) {
              this.versions.push(version)
              this.currentVersionNum = this.versions.length - 1
              if (isNewVersion) {
                this.ideas[this.currentVersionNum] = []
              } else {
                let sliceIdea = this.ideas.slice(0, this.sliceIndex + 1)
                this.ideas[this.currentVersionNum] = sliceIdea
              }
            }
            this.ideas[this.currentVersionNum].push(idea)
            this.$apply()
            this.$emit('addIdea')
          }
        }).catch((e) => {
          console.log('add error', e)
          errorHandler(e)
        })
      },

      searchScrollLower () {
        console.log('aaaaaa')
      },

      showActionSheet (ideaId, ideaIndex) {
        if (this.isReplying) {
          return
        }
        let arrMap = {
          0: `Ëµû(üëè${this.currentIdeas[ideaIndex].like || 0})`,
          1: 'Âàõ‰ΩúÊñ∞ÂàÜÊîØ',
          2: 'Âà†Èô§',
          3: '‰∏æÊä•',
          4: 'ÂÖ®Êñ∞ÊïÖ‰∫ã'
        }
        let reverseMap = {}
        Object.keys(arrMap).forEach((key, index) => {
          reverseMap[arrMap[key]] = index
        })

        let arr = [arrMap[0]]
        // ÊúÄÂêé‰∏ÄÊù°idea‰∏çÈúÄË¶ÅÊúâÂàõ‰ΩúÊñ∞ÂàÜÊîØ
        if (this.versions.length < 3 && ideaIndex !== this.currentIdeas.length - 1) {
          arr.push(arrMap[1])
        }
        console.log(this.currentIdeas[ideaIndex].user.objectId, AV.User.current().id)
        if (this.currentIdeas[ideaIndex].user.objectId === AV.User.current().id) {
          arr.push(arrMap[2])
        }

        arr.push(arrMap[3])

        if (this.versions.length < 3 && ideaIndex === 0) {
          arr.push(arrMap[4])
        }

        let handlerNums = arr.map(element => {
          return reverseMap[element]
        })

        let that = this
        let handler = {
          4: function () {
            that.methods['handleReply'].call(that, ideaId, 1, 1)
          },
          0: function () {
            that.handleFeedBtn(ideaId, 'like', ideaIndex)
            console.log('ÁÇπËµû')
          },
          1: function () {
            that.sliceIndex = ideaIndex
            that.methods['handleReply'].call(that, ideaId, 1, 0)
            console.log('Âàõ‰ΩúÊñ∞ÂàÜÊîØ', ideaId)
          },
          2: function () {
            wx.showToast({
              title: 'ÊöÇ‰∏çÊîØÊåÅÂà†Èô§',
              icon: 'none'
            })
            console.log('Âà†Èô§')
          },
          3: function () {
            that.handleFeedBtn(ideaId, 'report', ideaIndex)
            console.log('‰∏æÊä•')
          }
        }
        wx.showActionSheet({
          itemList: arr,
          success: function(res) {
            handler[handlerNums[res.tapIndex]]()
            console.log(res.tapIndex)
          },
          fail: function(res) {
            console.log(res.errMsg)
          }
        })
      }
    }

    watch = {
      topic (newValue, oldValue) {
        if (newValue.objectId === oldValue.objectId && newValue.versions.length === oldValue.versions.length) {
          return
        }
        this.fetchTopicData()
      }
    }

    handleFeedBtn (id, type, index) {
      let st = wx.getStorageSync('st')
      api.handleFeed(id, type, st).then((res) => {
        if (res.data.code) {
          this._errorHandle(res.data)
        } else {
          if (type === 'like') {
            wx.showToast({
              title: 'ÁÇπËµûÊàêÂäü',
              icon: 'success',
              duration: 1000
            })
          } else if (type === 'report') {
            wx.showToast({
              title: 'ÊÑüË∞¢‰Ω†ÁöÑ‰∏æÊä•, Êàë‰ª¨‰ºöÂèäÊó∂ÂÆ°Êü•',
              icon: 'none',
              duration: 2000
            })
          }
          let list = this.ideas[this.currentVersionNum]
          if (!list[index][type]) {
            list[index][type] = 1
          } else {
            list[index][type] += 1
          }
          this.$apply()
        }
      })
    }

    _errorHandle (errData) {
      // let code = errData.code
      let msg = errData.msg
      this.$emit('showToast', msg)
    }

    async getCurrentVersionNumIdeas () {
      let currentVersionNum = this.currentVersionNum
      let versionId = this.versions[currentVersionNum].objectId
      let version = await api.getVersion(versionId)
      let versionIdeas = version.data.ideas
      wx.hideNavigationBarLoading()
      return versionIdeas
    }

    _resolveIdeas (ideas) {
      let result = []
      ideas.forEach((idea) => {
        result.push(idea.data)
      })
      return result
    }

    async fetchTopicData (notShowLoading) {
      if (!this.topic.objectId) {
        return
      }
      try {
        if (!notShowLoading) {
          wx.showLoading({
            title: 'Ê≠£Âú®Âä†ËΩΩ...',
            mask: true
          })
        }
        let versions = this.versions = this.topic.versions

        /// ËÆæÁΩÆideas
        let ideas = []
        if (versions.length) {
          ideas = await this.getCurrentVersionNumIdeas()
        }
        this.ideas.push(ideas)
        this.isReady = true
        this.loading = false
        this.$apply()
        wx.hideLoading()
        wx.stopPullDownRefresh()
        this.fetchTimer()
      } catch (e) {
        errorHandler(e)
        console.error('fetch data error', e)
      }
    }

    events = {
      topicLoad () {
        this.isPulling = true
        this.$apply()
        this.fetchTopic()
      }
    }

    fetchTopic () {
      wx.showNavigationBarLoading()
      let currentVersion = this.versions[this.currentVersionNum]
      if (!currentVersion) {
        api.getFirstTopic().then(topic => {
          wx.hideNavigationBarLoading()
          wx.stopPullDownRefresh()
          this.topic = topic.data
          this.versions = topic.data.versions
          console.log(this.versions)
          this.$apply()
          this.fetchTimer()
        })
        return
      }
      let curVersionId = currentVersion.objectId
      api.getVersionBaseInfo(curVersionId).then(versionInfo => {
        if (versionInfo.data.updatedAt === currentVersion.updatedAt) {
          wx.hideNavigationBarLoading()
          wx.stopPullDownRefresh()
          this.fetchTimer()
        } else {
          this.fetchTopicData(true).then(() => {
            wx.stopPullDownRefresh()
            wx.hideNavigationBarLoading()
            currentVersion.updatedAt = versionInfo.data.updatedAt
            this.fetchTimer()
          })
        }
      })
    }

    fetchTimer () {
      this.clearTimer()
      // this.timer = setTimeout(() => {
      //   console.log('fetch timer')
      //   this.fetchTopic()
      // }, 5000)
    }

    clearTimer () {
      if (this.timer) {
        clearTimeout(this.timer)
        this.timer = null
      }
    }
  }
</script>
